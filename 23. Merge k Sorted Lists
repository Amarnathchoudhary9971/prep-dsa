:mergesort and then recursssion used in this question:



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    private:
    ListNode* merge(ListNode* l1,ListNode*l2)
    {
        if(l1==NULL)
        {
            return l2;
        }
        if(l2==NULL)
        {
            return l1;
        }
        if(l1->val<l2->val)
        {
            l1->next=merge(l1->next,l2);
            return l1;
        }else{
            l2->next=merge(l1,l2->next);
            return l2;
        }
        return NULL;
    }
    private:
    ListNode* partition(int s,int e,vector<ListNode*>&lists)
    {
        if(s>e)
        {
            return NULL;
        }
        if(s==e)
        {
            return lists[s];
        }
        int mid=s+(e-s)/2;
        ListNode* L1=partition(s,mid,lists);
        ListNode* L2=partition(mid+1,e,lists);
        return merge(L1,L2);
    }
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int i=0;
        int e=lists.size()-1;
        return partition(i,e,lists);
    }
};
