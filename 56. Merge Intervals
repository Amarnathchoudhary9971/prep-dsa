class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> ans;
        int i = 0;
        sort(intervals.begin(), intervals.end()); // sort by start time

        while (i < intervals.size()) {
            vector<int> output;
            output.push_back(intervals[i][0]);
            int end = intervals[i][1];

            int j = i + 1;

            while (j < intervals.size() && end >= intervals[j][0]) {
                end = max(end, intervals[j][1]);
                j++;
            }

            output.push_back(end);
            ans.push_back(output);
            i = j; // move to the next non-overlapping interval
        }

        return ans;
    }
};






//Optimal approach:
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> ans;

        // First, sort the intervals by start time
        sort(intervals.begin(), intervals.end());

        for (int i = 0; i < intervals.size(); i++) {
            if (ans.empty() || intervals[i][0] > ans.back()[1]) {
                ans.push_back(intervals[i]);
            } else {
                ans.back()[1] = max(ans.back()[1], intervals[i][1]);
            }
        }

        return ans;
    }
};
