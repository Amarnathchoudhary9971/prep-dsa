class Solution {
public:
    vector<int> topKSumPairs(vector<int>& a, vector<int>& b, int k) {
        // Step 1: Sort both arrays in descending order
        sort(a.rbegin(), a.rend());
        sort(b.rbegin(), b.rend());
        
        // Step 2: Max-heap {sum, {i, j}}
        priority_queue<pair<int, pair<int,int>>> pq;
        set<pair<int,int>> visited;
        vector<int> ans;
        
        // Step 3: Push the largest pair (0,0)
        pq.push({a[0] + b[0], {0, 0}});
        visited.insert({0, 0});
        
        // Step 4: Extract top k sums
        while(ans.size() < k && !pq.empty()) {
            auto top = pq.top();
            pq.pop();
            
            int sum = top.first;
            int i = top.second.first;
            int j = top.second.second;
            
            ans.push_back(sum);
            
            // Push next candidate (i+1, j)
            if(i + 1 < a.size() && !visited.count({i+1, j})) {
                pq.push({a[i+1] + b[j], {i+1, j}});
                visited.insert({i+1, j});
            }
            
            // Push next candidate (i, j+1)
            if(j + 1 < b.size() && !visited.count({i, j+1})) {
                pq.push({a[i] + b[j+1], {i, j+1}});
                visited.insert({i, j+1});
            }
        }
        
        return ans;
    }
};
