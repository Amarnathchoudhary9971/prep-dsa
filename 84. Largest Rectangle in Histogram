class Solution {
public:
vector<int> nextSmaller(vector<int>&heights,int n)
{
    vector<int>ans(n,-1);
    stack<int>st;
    for(int i=n-1;i>=0;i--)
    {
        while(!st.empty() && heights[st.top()]>=heights[i])
        {
            st.pop();
        }
        if(!st.empty())
        {
            ans[i]=st.top();
        }

        // push in stack:
        st.push(i);
    }
    return ans;
}
vector<int>prevSmaller(vector<int>&heights,int n)
{
    vector<int>ans(n,-1);
    stack<int>st;
    for(int i=0;i<n;i++)
    {
        // st me push karo:
        while(!st.empty() && heights[st.top()]>=heights[i])
        {
            st.pop();
        }
        // chhota hai to push karo
        if(!st.empty())
        {
            ans[i]=st.top();
        }
        st.push(i);
    }
    return ans;
}
    int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();
        vector<int>next(n);
        next=nextSmaller(heights,n);
        vector<int>prev(n);
        prev=prevSmaller(heights,n);
        int area=INT_MIN;
        for(int i=0;i<heights.size();i++)
        {
            int length=heights[i];
            if(next[i]==-1)
            {
                next[i]=n;
            }
            int width=next[i]-prev[i]-1;
            int newArea=length*width;
            area=max(newArea,area);
        }
        return area;
    }
};
